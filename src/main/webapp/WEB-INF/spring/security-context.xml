<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd">
<!-- url패턴을 사용하여 스프링 시큐리티 필터를 무시하는 경로 추가(아래) -->
<security:http pattern="/**/*.js" security="none"></security:http>
<security:http pattern="/**/*.css" security="none"></security:http>
<security:http pattern="/**/img/*" security="none"></security:http>
<!-- 스프링 시큐리티 기본설정인 로그인페이지, 로그아웃 기능 사용하겠다고 명시 spEL언어를 사용가능 -->
<security:http auto-config="true" use-expressions="true">
	<security:session-management invalid-session-url="/">
		<!-- 동일ID의 세션 최대 개수: 3개, 그 이상인 경우 기존 세션 무효화(아래) -->
		<!-- 예) 노트북에서 로그인 이후 PC에서 로그인하면 노트북 로그인 세션 무효 -->
		<security:concurrency-control max-sessions="3" error-if-maximum-exceeded="false" />
	</security:session-management>
	<!-- 특정 url 패턴에 해당하는 권한 부여(아래) -->
	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/*_write" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="GET"/>
	<security:intercept-url pattern="/**/*_update" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/*_delete" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/member/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**" access="permitAll"/>
	<security:csrf disabled="true"/>
	<security:form-login
		login-page="/login"
		login-processing-url="/login"
		always-use-default-target="true"
		default-target-url="/login_success"
		authentication-failure-url="/login?msg=fail"
		username-parameter="user_id"
		password-parameter="user_pw"
	/>
	<security:remember-me key="remember-key" token-validity-seconds="604800" remember-me-parameter="remember-me-parameter" />
	<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true" 
	delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE" />
</security:http>
<!-- 쿠키: 간단한 텍스트 문자 정보 저장(접속한 PC기기에 저장)
	세션: 간단한 텍스트 문자 정보 저장(접속한 서버기기에 저장)
	특징: 세션에 저장된 정보는 페이지를 이동해도 세션정보가 사라지지않고 유지 -->
	<!-- csrf(cross site request forgery): 사이트 간 요청 위조 -->
	<!-- 인증 관련 아이디/암호 비교 설정(아래) -->
	<security:authentication-manager>
	<!-- 스프링에 내장되어 있는 인증제공자, userDetail과 userDetailService를 사용하겠다고 명시(아래) -->
	<!-- select username,authority from authorities where username = 'admin' 내장쿼리변경 authorities-by-username-query  -->
		<security:authentication-provider>
			<security:jdbc-user-service 
				data-source-ref="dataSource"
				users-by-username-query="select user_id as no,user_pw as password, enabled from tbl_member where user_id = ?"
				authorities-by-username-query="select user_id as no,levels as authority from tbl_member where user_id = ?"
				/>
				<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
	<!-- 위 쿼리에서 사용할 패스워드 암호화 id passwordEncoder 빈 클래스를 생성(아래) -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- 
	BCrypt패스워드엔코더 클래스의 특징: 암호화 시키는 클래스 
	*특징1: MD5, SHA-1,2, SHA-512  대등한 암호화 클래스, 암호화시키는 속도 조절 가능
	- 해커가 ID를 알고 접속을 시도할 때 해시문자를 생성해서 기존 암호와 비교하게 되지만 속도제한때문에 1초에 수십만번의 시도를 하지 못하게 됨 
	*특징2: pw인 user02를 passwordEncoder로 암호화 시키면 실행 할때 마다 출력 해시 문자열 변경됨
	- user02 암호화 시킨 해시문자와 1초 뒤에 한번 더 암호화 시킨 해시문자 틀리게 출력
	- String.equals() 문자열 비교 메서드로는 비교불가
	*특징3: 예전 암호화 방식 = user02 암호화시키면 해시값이 항상 동일 => 방지하는 법(아래) 
	- 'ID고유값'+'user02암호'=암호화된 해시값 고유값나오게 처리
	- 위처럼 'ID고유값"을 salt(소금)라고 함
	- BCrypt패스워드 엔코더는 salt값 필요없이 동일한 user02라는 암호라고 해도 해시값(60바이트문자)이 다 틀림 
	-->
</beans>